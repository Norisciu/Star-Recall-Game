[{"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\words-list-game\\src\\index.js":"1","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\words-list-game\\src\\reportWebVitals.js":"2","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\words-list-game\\src\\App.js":"3","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\words-list-game\\src\\WordContainer.js":"4","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\words-list-game\\src\\starNames.js":"5","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\index.js":"6","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\App.js":"7","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\reportWebVitals.js":"8","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\helpers\\constants.js":"9","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\helpers\\GameConstants.js":"10","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\helpers\\Utils.js":"11","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\PlayScreen\\PauseMenu\\PauseMenu.jsx":"12","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\PlayScreen\\TimeBar\\useOnTimeoutCallback.js":"13","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\PlayScreen\\Hooks\\useGameSessionState.js":"14","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\PlayScreen\\Hooks\\usePlayScreenState.js":"15","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\helpers\\utils.js":"16","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\PlayScreen\\TimeBar\\TimeBar.jsx":"17","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\PlayScreen\\StarList\\StarsList.jsx":"18","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\PlayScreen\\StarList\\StarName.jsx":"19","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\StartScreen\\SelectPlayModeMenu\\SelectPlayModeMenu.jsx":"20","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\StartScreen\\SelectModeCard\\SelectModeCard.jsx":"21","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\StartScreen\\Star\\Star.jsx":"22","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\helpers\\gameConstants.js":"23","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\PlayScreen\\PlayScreen.jsx":"24","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\EndGameScreen\\EndGameScreen.jsx":"25","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\StartScreen\\StartScreen.jsx":"26","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\GameUI\\GameButton\\GameButton.jsx":"27","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\starNamesData\\starNames.js":"28"},{"size":500,"mtime":499162500000,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":499162500000,"results":"31","hashOfConfig":"30"},{"size":6694,"mtime":1610558336911,"results":"32","hashOfConfig":"30"},{"size":748,"mtime":1610051181041,"results":"33","hashOfConfig":"30"},{"size":854,"mtime":1610226111296,"results":"34","hashOfConfig":"30"},{"size":500,"mtime":499162500000,"results":"35","hashOfConfig":"36"},{"size":645,"mtime":1632688527119,"results":"37","hashOfConfig":"36"},{"size":362,"mtime":499162500000,"results":"38","hashOfConfig":"36"},{"size":584,"mtime":1632684055087,"results":"39","hashOfConfig":"36"},{"size":1465,"mtime":1632688174258,"results":"40","hashOfConfig":"36"},{"size":1958,"mtime":1632688174299,"results":"41","hashOfConfig":"36"},{"size":881,"mtime":1632687849159,"results":"42","hashOfConfig":"36"},{"size":235,"mtime":1632687150860,"results":"43","hashOfConfig":"36"},{"size":8299,"mtime":1632688436959,"results":"44","hashOfConfig":"36"},{"size":1003,"mtime":1632687737926,"results":"45","hashOfConfig":"36"},{"size":1972,"mtime":1632688436959,"results":"46","hashOfConfig":"36"},{"size":3709,"mtime":1632688174258,"results":"47","hashOfConfig":"36"},{"size":566,"mtime":1632687922142,"results":"48","hashOfConfig":"36"},{"size":821,"mtime":1632688174258,"results":"49","hashOfConfig":"36"},{"size":1263,"mtime":1632688076490,"results":"50","hashOfConfig":"36"},{"size":915,"mtime":1632688057231,"results":"51","hashOfConfig":"36"},{"size":138,"mtime":1632688114808,"results":"52","hashOfConfig":"36"},{"size":1465,"mtime":1632688174258,"results":"53","hashOfConfig":"36"},{"size":2821,"mtime":1632688403686,"results":"54","hashOfConfig":"36"},{"size":861,"mtime":1632688335424,"results":"55","hashOfConfig":"36"},{"size":1256,"mtime":1632688403685,"results":"56","hashOfConfig":"36"},{"size":374,"mtime":1632688400978,"results":"57","hashOfConfig":"36"},{"size":854,"mtime":1632688434666,"results":"58","hashOfConfig":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"1gwlsd6",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"61"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"61"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},"1t7j3b4",{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"75"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"75"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"75"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"75"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\words-list-game\\src\\index.js",[],["124","125"],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\words-list-game\\src\\reportWebVitals.js",[],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\words-list-game\\src\\App.js",["126","127","128"],"import logo from './logo.svg';\nimport './App.css';\nimport WordContainer from \"./WordContainer\";\nimport React , {useState , useReducer} from \"react\";\nimport words from \"./starNames\"; \n\nclass Entry{\n  constructor(name , selected , color){\n    this.name  = name;\n    this.selected = selected;\n    this.color  = color;\n  }\n\n  switchSelected(){\n    this.selected = !this.selected;\n  }\n  \n}\n\n\nconst NUM_OF_WORDS =5;\n\n\nfunction App() {\n  // const words =  [\"star\" , \"name\" , \"other\" , \"sun\" , \"moon\" , \"earth\" , \"another\" , \"thing\" , \"trouble\"];\n  const shuffleArray = (arr)  => {\n    let array  = arr.slice();\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n    // let arrayCopy  = array.slice();\n    // return shuffleArray()\n  }\n\n  const entryFromWords  = (words) => {\n    return words.map(word => new Entry(word , false , \"azure\") )\n  }\n  const randomWords  = (numWords , words)=>{\n     return shuffleArray(words).slice(0 , numWords);\n  }\n\n  const checkWordResult = (word , aDtate) => {\n    let isSelected  =  word.selected;\n    let isIncluded = aDtate.selectedWords.map(e => e.name).includes(word.name);\n\n    if (isSelected && isIncluded){return {...word , color:\"lightgreen\"}}\n    else if (isSelected && !isIncluded){ return {...word , color:\"crimson\"}}\n    else if (!isSelected && isIncluded){return {...word , color:\"cadetblue\"}}\n    // else {return word}\n    else {return {...word , color:\"azure\"}}\n    // if (!state.selectedWords.includes(word) && word.selected){\n    //   return {...word , color:\"red\"}\n    // }\n    // else if (){\n\n    // }\n\n  }\n  \n  // const [displayedWords , setDisplayedWords]  = useState(entryFromWords( randomWords(4 , words) ));\n  const getNextState  =  (state)=>{\n    const states =  [\"MEMORIZE\" , \"SOLVE\", \"NEXT_TRIAL\"];\n    let idx  = (states.indexOf(state) + 1) % 2;\n    return states[idx];\n  }\n\n  const randomInRange   = (begin , end) =>{\n    if (begin > end) {return randomInRange(end , begin)}\n    let difference  =  Math.abs(begin - end);\n    return begin  + 1 + Math.floor(Math.random()* difference);\n  }\n  \n  const toggleSelectWord  =  (wordName) => {\n    if(state.trialState != \"SOLVE\"){return}\n    dispatch({type:\"TOGGLE_SELECT_WORD\" , wordName: wordName});\n  }\n\n  let current  = {\n    trial : 1,\n    selectedWords:[],\n    trialState: \"MEMORIZE\",\n    numOfWords:NUM_OF_WORDS,\n    displayedWords:entryFromWords( randomWords(NUM_OF_WORDS , words) ),\n    \n  }\n  \n  const reducer  =  (state , action , ...argumeents) => {\n    // console.log(\"enter the reducer etnnnkoiuyt\") MMnnnnnnkoiuy;\n    if (action.type === \"NEXT_TRIAL\"){\n      console.log(\"enxt trial\");\n      return {...state , trialState : \"MEMORIZE\" , displayedWords:entryFromWords( randomWords(NUM_OF_WORDS , words) )};\n    }\n\n    else if (action.type === \"NEXT\"){\n      let sameWordsNum  =  randomInRange(2,4 );\n      // let sameWordsNum  =  Math.floor(Math.random()*state.numOfWords);\n      let differentWordsNum  = state.numOfWords   -  sameWordsNum;  \n      // Math.floor(Mat)\n      let wordNames  = state.displayedWords.map(word => word.name);\n      let differentWords  = words.filter(word => !wordNames.includes(word));\n      let sameWords  = shuffleArray(wordNames).slice(0,sameWordsNum);\n      let resultListWords =  shuffleArray(differentWords.slice(0,differentWordsNum).concat(sameWords));\n      \n      let tempDisplayedWords  = state.displayedWords.slice();\n      return {\n        ...state  , \n        trialState:getNextState(state.trialState),\n        displayedWords:entryFromWords(resultListWords),\n        selectedWords:tempDisplayedWords\n      }\n    }\n\n    else if (action.type === \"TOGGLE_SELECT_WORD\"){\n      console.log(\"some trouble..\");\n      let resultList  = state.displayedWords.map(e => e.name === action.wordName ? {...e , selected:!e.selected} : e);\n      return {...state , displayedWords:resultList};\n      // `toggle ${argumeents}`);\n      // return state;\n    }\n\n    else if (action.type === \"CHECK_ANSWER\"){\n      console.log(\"check answer..\");\n      console.log(\"check the little answer..\");\n      let checkResult = state.displayedWords.map(word => checkWordResult(word , state));\n      return {...state , trialState:\"NEXT_TRIAL\" , displayedWords:checkResult , trial:state.trial+1};\n      // trialState:getNextState(state.trialState)\n    }\n    // return state;\n    // throw new Error(\"no matching action typevmmnnnnnnnnnjiuymmnnnnnkoiuykjhg \")))))))))));\n  }\n\n\n  const [state , dispatch] =  useReducer(reducer , current);\n\n  const checkAnswer = () => {\n    if (state.trialState === \"NEXT_TRIAL\"){\n      console.log(\"make trial..\");\n      // dispatch({type:\"MEMORIZE\"});\n\n      dispatch({type:\"NEXT_TRIAL\"})\n    }\n    else {\n      dispatch({type:\"CHECK_ANSWER\"});\n    }\n    // \"checking the provideid answer...\");\n    // state);\n    // setDisplayedWords(checkResult);\n  }\n\n  \n  // selectFun={checkWord}\n  // const selectWord  = (word) => {}\n\n  const nextState  =  (e) => {\n    // \"click say\")\n    e.preventDefault();\n    dispatch({type:\"NEXT\"})\n  }\n\n  if (state.trialState === \"MEMORIZE\"){\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n            <p className=\"problemQuestion\">\n              Retain the following list of words\n            </p>\n            <div className=\"wordsList\">\n              {state.displayedWords.map((word , idx) => <WordContainer key={idx} word={word.name} selected={word.selected} color={word.color} toggleSelectWord={toggleSelectWord}/>)}\n            </div>\n            <div className=\"buttonPlace\">\n              <button className=\"aButton\" onClick={nextState}>Next</button>\n            </div>  \n            {/* {undefined} */}\n           \n            {/* <p>{state.trialState}</p> */}\n          </div>\n        </div> \n       )\n  }\n  else {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <p className=\"problemQuestion\">\n                Retain the following list of words\n          </p>\n          <div className=\"wordsList\">\n            {state.displayedWords.map((word , idx) => <WordContainer key={idx}  word={word.name} selected={word.selected} color={word.color} toggleSelectWord={toggleSelectWord}/>)}\n          </div>\n          <div className=\"buttonPlace\">\n            <button className=\"aButton\" onClick={checkAnswer}>\n              {state.trialState === \"SOLVE\" ? \"Check answer\" : \"Next trial\"}\n            </button>\n          </div>\n          {/* <p>{state.trialState}</p> */}\n          {/* <p className=\"\">{state.trial}</p> */}\n\n        </div>\n      </div>\n    )\n  }\n  \n        \n\n    // </div>\n  // );\n}\n\nexport default App;\n","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\words-list-game\\src\\WordContainer.js",["129"],"import {useState} from \"react\"\r\nimport \"./index.css\"\r\n\r\n\r\n\r\nconst WordContainer  =  (properties) => {\r\n    // const selectWord  = 69\r\n    // const toggleSelectWord  = (e) => {setIsSelected(!isSelected)}\r\n    // let [isSelected , setIsSelected]  = useState(false);\r\n    // Mike\r\n    let classNames  = \"wordContainer\"  + (properties.selected ? \" selected\" : \"\");\r\n    let aStyle  =  {\"backgroundColor\":properties.color};\r\n    console.log(\"-\");\r\n    return (\r\n        <div className={classNames} style={aStyle} onClick={e => properties.toggleSelectWord(properties.word)}>\r\n            \r\n        {/* </div> */}\r\n        {/* // <div className=\"wordContainer\" > */}\r\n            {properties.word}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WordContainer","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\words-list-game\\src\\starNames.js",[],["130","131"],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\index.js",[],["132","133"],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\App.js",[],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\reportWebVitals.js",[],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\helpers\\constants.js",[],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\helpers\\GameConstants.js",[],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\helpers\\Utils.js",[],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\PlayScreen\\PauseMenu\\PauseMenu.jsx",[],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\PlayScreen\\TimeBar\\useOnTimeoutCallback.js",[],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\PlayScreen\\Hooks\\useGameSessionState.js",["134","135","136","137"],"import React, { useEffect, useState } from \"react\";\r\nimport { GameConstants } from \"../../../helpers/GameConstants\";\r\nimport { initWords } from \"../../../helpers/utils\";\r\nimport words from \"../../../starNames\";\r\nimport { randomInRange, shuffleArray, entryFromWords, clamp } from \"../../../helpers/utils\";\r\nimport { TIME_PER_QUESTION } from \"../../../helpers/constants\";\r\nimport { useNavigate } from \"react-router\";\r\n\r\nconst initState = {\r\n    selectedWords: [],\r\n    namesToMemorize: [],\r\n    namesForRecall: [],\r\n\r\n    trial: 1,\r\n    trialState: GameConstants.GAME_STATE_MEMORIZE,\r\n    numOfWords: GameConstants.NUM_OF_WORDS,\r\n    displayedWords: [],\r\n    trialStatement: \"Memorize these star names\",\r\n    buttonLabel: \"Next\",\r\n\r\n    points: 0,\r\n\r\n    trialStatement: \"Memorize these star names\",\r\n    timeAvailable: TIME_PER_QUESTION,\r\n\r\n}\r\n\r\n// hook usd for keeping track of state in the current playing session\r\nexport const useGameSessionState = () => {\r\n    const [gameState, setGameState] = useState(initState);\r\n    const navigation = useNavigate();\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(\"PlayScreen() useEffect([]) init words\");\r\n        initGame();\r\n    }, [])\r\n\r\n    const initGame = () => {\r\n        console.log(\"PlayScreen initGame()\");\r\n        const words = initWords();\r\n        const trialTimeAvailable = getAvailableTime(initState.numOfWords);\r\n\r\n        setGameState({\r\n            ...initState,\r\n            timeAvailable: trialTimeAvailable,\r\n            displayedWords: words\r\n        });\r\n    }\r\n\r\n    const nextState = () => {\r\n        console.log(\"PlayScreen() nextState\");\r\n        // console.log(gameState);\r\n\r\n        const { trialState } = gameState;\r\n        const gameStates = GameConstants.GAME_STATES_ORDER;\r\n        let stateIdx = gameStates.indexOf(trialState);\r\n        let nextIdx = (stateIdx + 1) % gameStates.length;\r\n        return gameStates[nextIdx];\r\n    }\r\n\r\n    const nextAction = () => {\r\n        console.log(\"nextAction()\");\r\n        console.log(gameState);\r\n        if (isEndGame()) {\r\n            navigation(`/EndGame/${gameState.points}`);\r\n        }\r\n        let state = nextState();\r\n        let stateToActionMap = new Map([\r\n            [GameConstants.GAME_STATE_MEMORIZE, onMemorize],\r\n            [GameConstants.GAME_STATE_RECALL, onRecall],\r\n            [GameConstants.GAME_STATE_CHECK_ANSWER, onCheckAnswer]\r\n\r\n        ]);\r\n\r\n        const actionCallback = stateToActionMap.get(state)\r\n        return actionCallback();\r\n    }\r\n\r\n    const onMemorize = () => {\r\n        let words = initWords();\r\n        let wordNames = words.map(word => word.name);\r\n        setGameState({\r\n            ...gameState,\r\n            trialStatement: \"Memorize these words\",\r\n            trialState: GameConstants.GAME_STATE_MEMORIZE,\r\n            displayedWords: initWords(gameState.numOfWords),\r\n            namesToMemorize: wordNames,\r\n        });\r\n    }\r\n\r\n    const onRecall = () => {\r\n        console.log(\"onRecall()\");\r\n\r\n        let resultListWords = buildListOfWordsForRecallState();\r\n        let wordNames = gameState.displayedWords.map(word => word.name);\r\n\r\n        setGameState({\r\n            ...gameState,\r\n            trialStatement: \"Recall the words you memorize (not all words will appear)\",\r\n\r\n            trialState: GameConstants.GAME_STATE_RECALL,\r\n            displayedWords: entryFromWords(resultListWords),\r\n            namesToMemorize: wordNames,\r\n            namesForRecall: resultListWords\r\n        })\r\n    }\r\n\r\n    const buildListOfWordsForRecallState = () => {\r\n        let sameWordsNum = randomInRange(2, 4);\r\n        let differentWordsNum = gameState.numOfWords - sameWordsNum;\r\n        let wordNames = gameState.displayedWords.map(word => word.name);\r\n        let differentWords = removeWordsFromList(words, wordNames);\r\n        let sameWords = wordNames.slice(0, sameWordsNum);\r\n        let resultListWords = shuffleArray(differentWords.slice(0, differentWordsNum).concat(sameWords));\r\n\r\n        return resultListWords;\r\n    }\r\n\r\n\r\n    const removeWordsFromList = (wordList, wordsToRemove) => wordList.filter(word => !wordsToRemove.includes(word))\r\n\r\n    const onCheckAnswer = () => {\r\n        let { namesToMemorize } = gameState;\r\n        let checkResult = gameState.displayedWords.map(word => checkWord(word, namesToMemorize));\r\n        let results = getResults(checkResult);\r\n        let nextNumberOfStars = adjustNumberOfStars(checkResult, gameState.numOfWords);\r\n        let nextTrialTimeAvailable = getAvailableTime(nextNumberOfStars);\r\n        let trialPoints = computePoints(results);\r\n\r\n        setGameState({\r\n            ...gameState,\r\n            trialState: \"NEXT_TRIAL\",\r\n            displayedWords: checkResult,\r\n            trial: gameState.trial + 1,\r\n            numOfWords: nextNumberOfStars,\r\n            points: gameState.points + trialPoints,\r\n            timeAvailable: nextTrialTimeAvailable\r\n        });\r\n    }\r\n\r\n    const checkWord = (word, wordsToMemorize) => {\r\n        const isWordSelection = word.selection;\r\n        const isWordToMemorize = wordsToMemorize.includes(word.name);\r\n        if (isWordSelection && isWordToMemorize) {\r\n            return { ...word, color: GameConstants.WORD_COLOR_MATCH }\r\n        }\r\n\r\n        else if (isWordSelection && !isWordToMemorize) {\r\n            return { ...word, color: GameConstants.WORD_COLOR_MISTAKE }\r\n        }\r\n\r\n        else if (!isWordSelection && isWordToMemorize) {\r\n            return { ...word, color: GameConstants.WORD_COLOR_MISS }\r\n        }\r\n\r\n        else {\r\n            return { ...word, color: GameConstants.WORD_COLOR_NEUTRAL }\r\n        }\r\n    }\r\n\r\n    const adjustNumberOfStars = (checkResults, starNamesCount) => {\r\n        let results = {\r\n            misses: 0, matches: 0, mistakes: 0\r\n        }\r\n\r\n        checkResults.forEach(word => {\r\n            if (word.color === GameConstants.WORD_COLOR_MISS) {\r\n                results.misses++;\r\n            }\r\n\r\n            else if (word.color === GameConstants.WORD_COLOR_MATCH) {\r\n                results.matches++;\r\n            }\r\n\r\n            else if (word.color === GameConstants.WORD_COLOR_MISTAKE) {\r\n                results.misses++;\r\n            }\r\n\r\n\r\n        })\r\n\r\n        let modifier = [-1, 0, 1][Math.max(1 - results.misses, -1) + 1];\r\n        return clamp(\r\n            GameConstants.LOW_WORDS,\r\n            starNamesCount + modifier,\r\n            GameConstants.HIGH_WORDS\r\n        );\r\n\r\n    }\r\n\r\n    const onMemorizeStepTimeout = () => nextAction();\r\n\r\n    const getAvailableTime = (starsCount) => {\r\n\r\n        starsCount = clamp(\r\n            GameConstants.LOW_WORDS,\r\n            starsCount,\r\n            GameConstants.HIGH_WORDS\r\n        )\r\n        return GameConstants.starToSecondsAssoc\r\n                .find(([stars, _]) => starsCount >= stars)[1];\r\n    }\r\n\r\n    const getResults = words => {\r\n        let results = {\r\n            misses: 0, matches: 0, mistakes: 0\r\n        }\r\n\r\n        words.forEach(word => {\r\n            if (word.color === GameConstants.WORD_COLOR_MISS) {\r\n                results.misses++;\r\n            }\r\n\r\n            else if (word.color === GameConstants.WORD_COLOR_MATCH) {\r\n                results.matches++;\r\n            }\r\n\r\n            else if (word.color === GameConstants.WORD_COLOR_MISTAKE) {\r\n                results.misses++;\r\n            }\r\n        })\r\n\r\n        return results;\r\n    }\r\n\r\n    const computePoints = ({ misses, matches, mistakes }) => {\r\n        const points = matches * 100 - (mistakes * 10) - misses * 5;\r\n        return Math.max(0, points);\r\n    }\r\n\r\n    const toggleStarSelection = name => {\r\n        if (gameState.trialState != GameConstants.GAME_STATE_RECALL) {\r\n            return;\r\n        }\r\n\r\n        const resultList = gameState.displayedWords.map(star => star.name === name ? toggleStar(star) : star);\r\n        setGameState({ ...gameState, displayedWords: resultList });\r\n    }\r\n\r\n    const toggleStar = star => ({ ...star, selection: !star.selection })\r\n    const isMemorizeState = () => gameState.trialState === GameConstants.GAME_STATE_MEMORIZE;\r\n\r\n    const isEndGame = () => gameState.trial > GameConstants.GAME_TRIALS;\r\n\r\n    return [\r\n        gameState,\r\n        onMemorizeStepTimeout,\r\n        isMemorizeState,\r\n        isEndGame,\r\n        toggleStarSelection\r\n    ];\r\n}","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\PlayScreen\\Hooks\\usePlayScreenState.js",["138"],"import { useState } from \"react\";\r\nimport { playmodes } from \"../../../helpers/constants\";\r\n\r\nconst initPlayScreenState = {\r\n    isPause: false,\r\n    playMode: null\r\n}\r\n\r\n\r\n// custom hook for keeping track of \"screen state\" \r\n// things like wether the screen is on pause/resume mode or the play mode (with/without counter)\r\n\r\nexport const usePlayScreenState = (playMode) => {\r\n    const [gameConfig, setGameConfig] = useState({\r\n        ...initPlayScreenState,\r\n        playMode: playMode\r\n    });\r\n\r\n    const setPause = (pauseValue) => setGameConfig({\r\n        ...gameConfig,\r\n        isPause: pauseValue\r\n    });\r\n\r\n    const isInCounterPlayMode = () => gameConfig.playMode === playmodes.PLAY_MODE_COUNTER;\r\n\r\n    const pauseGame = () => setGameConfig({\r\n        ...gameConfig,\r\n        isPause: true\r\n    });\r\n\r\n    const resumeGame = () => setGameConfig({\r\n        ...gameConfig,\r\n        isPause: false\r\n    });\r\n\r\n\r\n    return [gameConfig, pauseGame, resumeGame, isInCounterPlayMode ];\r\n}\r\n\r\n\r\n\r\n","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\helpers\\utils.js",[],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\PlayScreen\\TimeBar\\TimeBar.jsx",["139","140","141","142"],"import { useEffect, useRef, useState } from \"react\";\r\nimport { useOnTimeoutCallback } from \"./useOnTimeoutCallback\";\r\nimport { TIME_PER_QUESTION } from \"../../../helpers/constants\";\r\nimport { gameConstants } from \"../../../helpers/gameConstants\";\r\nimport \"./TimeBar.css\";\r\n\r\nexport function TimeBar({\r\n    timePerQuestion = TIME_PER_QUESTION ,  \r\n    shouldRestart,\r\n    onTimeout,\r\n    someProp,\r\n    isPause\r\n}){\r\n\r\n    let [timeBarWidth , setTimeBarWidth] = useState(timePerQuestion);\r\n    const timerRef  = useRef();\r\n    const lastUpdateTime =   useRef(0);\r\n    const animStartTime  = useRef();\r\n    const isRunning  = useRef(false);\r\n    const onTimeoutCallbackRef = useOnTimeoutCallback(onTimeout);\r\n    const timeSinceAnimationStart = useRef(0);\r\n    \r\n\r\n    useEffect(() => { start(); } , []);\r\n    useEffect(() => () => stop() , []);\r\n\r\n    useEffect(() => {\r\n        if (isPause)  { return stop(); }\r\n        return resume();\r\n    } , [isPause])\r\n\r\n    useEffect(() => {\r\n        if (someProp === gameConstants.GAME_STATE_RECALL) {\r\n            stop();\r\n        }\r\n    }  , [someProp])\r\n\r\n    useEffect(() => {\r\n        if (!shouldRestart) { return; }\r\n\r\n        start(); \r\n    }, [shouldRestart]);\r\n\r\n\r\n    const start =  () => {\r\n        console.log(\"TimerBar start()\");\r\n        lastUpdateTime.current  = performance.now();\r\n        timeSinceAnimationStart.current =  0;\r\n        isRunning.current = true;\r\n        timerRef.current =  requestAnimationFrame(decrementTimerBarUpdate);\r\n    }\r\n\r\n    const stop  =  () => {\r\n        console.log(\"TimerBar stop()\");\r\n        isRunning.current = false;\r\n        cancelAnimationFrame(timerRef.current);\r\n    }\r\n\r\n    const resume = () => {\r\n        console.log(\"TimeBar resume()\");\r\n        isRunning.current = true;\r\n        lastUpdateTime.current =  performance.now();\r\n        timerRef.current  = requestAnimationFrame(decrementTimerBarUpdate);\r\n\r\n    }\r\n\r\n    const decrementTimerBarUpdate  =  currentTime => {\r\n\r\n        if (!isRunning.current) { return; }\r\n\r\n        let delta  = currentTime - lastUpdateTime.current;\r\n        lastUpdateTime.current  =  currentTime;\r\n        timeSinceAnimationStart.current += delta;\r\n        let timePerQuestionMs  = timePerQuestion * 1000;\r\n        let completionPercent  =  (timeSinceAnimationStart.current  / timePerQuestionMs) * 100;\r\n        setTimeBarWidth(100 - completionPercent);\r\n\r\n        if (completionPercent >= 100){\r\n            setTimeBarWidth(0);\r\n            stop();\r\n\r\n            onTimeoutCallbackRef.current();\r\n            return;\r\n        }\r\n\r\n        timerRef.current  = requestAnimationFrame(decrementTimerBarUpdate);\r\n\r\n    }\r\n\r\n    const decrementTimerBar =  (currentTime) => {\r\n        console.log(\"TimeBar decrementTimerBar()\");\r\n        if (!isRunning.current) { return; }\r\n     \r\n        lastUpdateTime.current  = currentTime;\r\n        let timeSinceAnimationStart  =  currentTime  - animStartTime.current;\r\n        let timePerQuestionMs  = timePerQuestion * 1000;\r\n        let completionPercent =  (timeSinceAnimationStart / timePerQuestionMs) *100;\r\n\r\n        setTimeBarWidth(100 - completionPercent);\r\n        if (completionPercent >= 100){\r\n            setTimeBarWidth(0);\r\n            stop();\r\n            onTimeoutCallbackRef.current();\r\n            return;\r\n        }\r\n\r\n        timerRef.current  = requestAnimationFrame(decrementTimerBar);\r\n    }\r\n\r\n    const debugOnTimeout  =  () => {\r\n        if (isRunning.current) { return stop(); }\r\n        resume();\r\n    }\r\n\r\n    return (\r\n        <div className={\"timeBar__timebar\"} onClick ={debugOnTimeout} >\r\n            <div  className={\"timeBar__fill\"} style={{width: `${timeBarWidth}%`}}></div> \r\n        </div>\r\n    )\r\n\r\n}\r\n","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\PlayScreen\\StarList\\StarsList.jsx",[],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\PlayScreen\\StarList\\StarName.jsx",[],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\StartScreen\\SelectPlayModeMenu\\SelectPlayModeMenu.jsx",[],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\StartScreen\\SelectModeCard\\SelectModeCard.jsx",[],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\StartScreen\\Star\\Star.jsx",[],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\helpers\\gameConstants.js",[],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\PlayScreen\\PlayScreen.jsx",["143","144"],"import React from \"react\";\r\nimport { StarsList } from \"./StarList/StarsList.jsx\";\r\nimport { GameButton } from \"../../GameUI/GameButton/GameButton.jsx\";\r\nimport { TimeBar } from \"./TimeBar/TimeBar.jsx\";\r\nimport { useParams } from \"react-router\";\r\nimport { PauseMenu } from \"./PauseMenu/PauseMenu\";\r\nimport { usePlayScreenState } from \"./Hooks/usePlayScreenState\";\r\nimport { useGameSessionState } from \"./Hooks/useGameSessionState\";\r\nimport \"./playScreen.css\";\r\n\r\n\r\nexport function PlayScreen({ }) {\r\n\r\n    const { playMode } = useParams();\r\n    const [\r\n        gameState,\r\n        onMemorizeStepTimeout,\r\n        isMemorizeState,\r\n        isEndGame,\r\n        toggleStarName\r\n    ] = useGameSessionState();\r\n    const [\r\n        screenState,\r\n        pauseGame,\r\n        resumeGame,\r\n        isInCounterPlayMode\r\n    ] = usePlayScreenState(playMode);\r\n\r\n\r\n    return (\r\n        <div className=\"game-screen game-screen__container\">\r\n            <div className=\"game-screen__header content\">\r\n                <span className=\"play-screen__trials\">\r\n                    Trial : {gameState.trial}\r\n                </span>\r\n                <span className=\"play-screen__points\">\r\n                    Points : {gameState.points}\r\n                </span>\r\n\r\n            </div>\r\n            <div className=\"game-screen__main content\">\r\n                {isInCounterPlayMode() && <TimeBar\r\n                    timePerQuestion={gameState.timeAvailable}\r\n                    shouldRestart={isMemorizeState()}\r\n                    onTimeout={onMemorizeStepTimeout}\r\n                    someProp={gameState.trialState}\r\n                    isPause={gameState.isPause}\r\n\r\n                />\r\n                }\r\n                <p className=\"game-screen__trial-question\">{gameState.trialStatement}</p>\r\n\r\n                <div className=\"play-screen__container \">\r\n                    <StarsList\r\n                        stars={gameState.displayedWords}\r\n                        toggleCallback={toggleStarName}\r\n                        trialState={gameState.trialState}\r\n                    />\r\n                    <div className=\"play-screen__button-controls\">\r\n                        <GameButton\r\n                            className=\"play-screen__button\"\r\n\r\n                            label={gameState.buttonLabel}\r\n                            onClickCallback={onMemorizeStepTimeout}\r\n                        />\r\n                        <GameButton\r\n                            className=\"play-screen__button\"\r\n                            label={\"Pause\"}\r\n                            onClickCallback={pauseGame}\r\n                        />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                {screenState.isPause && <PauseMenu onResumeCallback={resumeGame} />}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}","D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\EndGameScreen\\EndGameScreen.jsx",[],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\Screens\\StartScreen\\StartScreen.jsx",[],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\GameUI\\GameButton\\GameButton.jsx",[],"D:\\ProgrammingTrials\\WebDesign\\ReactPrograms\\star-recall-game\\src\\starNamesData\\starNames.js",[],{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":1,"column":8,"nodeType":"151","messageId":"152","endLine":1,"endColumn":12},{"ruleId":"149","severity":1,"message":"153","line":4,"column":17,"nodeType":"151","messageId":"152","endLine":4,"endColumn":25},{"ruleId":"154","severity":1,"message":"155","line":76,"column":25,"nodeType":"156","messageId":"157","endLine":76,"endColumn":27},{"ruleId":"149","severity":1,"message":"153","line":1,"column":9,"nodeType":"151","messageId":"152","endLine":1,"endColumn":17},{"ruleId":"145","replacedBy":"158"},{"ruleId":"147","replacedBy":"159"},{"ruleId":"145","replacedBy":"160"},{"ruleId":"147","replacedBy":"161"},{"ruleId":"149","severity":1,"message":"162","line":1,"column":8,"nodeType":"151","messageId":"152","endLine":1,"endColumn":13},{"ruleId":"163","severity":1,"message":"164","line":23,"column":5,"nodeType":"165","messageId":"157","endLine":23,"endColumn":19},{"ruleId":"166","severity":1,"message":"167","line":37,"column":8,"nodeType":"168","endLine":37,"endColumn":10,"suggestions":"169"},{"ruleId":"154","severity":1,"message":"155","line":233,"column":34,"nodeType":"156","messageId":"157","endLine":233,"endColumn":36},{"ruleId":"149","severity":1,"message":"170","line":19,"column":11,"nodeType":"151","messageId":"152","endLine":19,"endColumn":19},{"ruleId":"166","severity":1,"message":"171","line":24,"column":36,"nodeType":"168","endLine":24,"endColumn":38,"suggestions":"172"},{"ruleId":"166","severity":1,"message":"173","line":30,"column":9,"nodeType":"168","endLine":30,"endColumn":18,"suggestions":"174"},{"ruleId":"166","severity":1,"message":"171","line":42,"column":8,"nodeType":"168","endLine":42,"endColumn":23,"suggestions":"175"},{"ruleId":"149","severity":1,"message":"176","line":107,"column":51,"nodeType":"151","messageId":"152","endLine":107,"endColumn":68},{"ruleId":"177","severity":1,"message":"178","line":12,"column":28,"nodeType":"179","messageId":"157","endLine":12,"endColumn":31},{"ruleId":"149","severity":1,"message":"180","line":19,"column":9,"nodeType":"151","messageId":"152","endLine":19,"endColumn":18},"no-native-reassign",["181"],"no-negated-in-lhs",["182"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["181"],["182"],["181"],["182"],"'React' is defined but never used.","no-dupe-keys","Duplicate key 'trialStatement'.","ObjectExpression","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initGame'. Either include it or remove the dependency array.","ArrayExpression",["183"],"'setPause' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'start'. Either include it or remove the dependency array.",["184"],"React Hook useEffect has a missing dependency: 'resume'. Either include it or remove the dependency array.",["185"],["186"],"'decrementTimerBar' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'isEndGame' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},"Update the dependencies array to be: [initGame]",{"range":"195","text":"196"},"Update the dependencies array to be: [start]",{"range":"197","text":"198"},"Update the dependencies array to be: [isPause, resume]",{"range":"199","text":"200"},"Update the dependencies array to be: [shouldRestart, start]",{"range":"201","text":"202"},[1177,1179],"[initGame]",[798,800],"[start]",[946,955],"[isPause, resume]",[1192,1207],"[shouldRestart, start]"]